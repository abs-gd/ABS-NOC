{% extends "layout.twig" %}

{% block title %}ABS NOC - {{ server.name }}{% endblock %}

{% block content %}
	<div class="server-details-container">
		<h1 class="server-details-title">{{ server.name}}</h1>

		{% if error %}
			<p style="color: red;">{{ error }}</p>
		{% endif %}

		{% if success %}
			<p style="color: green;">{{ success }}</p>
		{% endif %}

		<form method="POST" action="/servers/update" class="server-details-form">
			<input type="hidden" name="csrf_token" value="{{ csrf_token }}">
			<input type="hidden" name="id" value="{{ server.id }}">

			<label for="name">Server Name:</label>
			<input type="text" name="name" id="name" value="{{ server.name }}" required>

			<label for="ip_address">IP Address:</label>
			<input type="text" name="ip_address" id="ip_address" value="{{ server.ip_address }}" required>

			<label for="os">Operating System:</label>
			<input type="text" name="os" id="os" value="{{ server.os }}" required>

			<label for="location">Location:</label>
			<input type="text" name="location" id="location" value="{{ server.location }}" required>

			<label for="status">Status:</label>
			<select name="status" id="status">
				<option value="active" {% if server.status == 'active' %} selected {% endif %}>Active</option>
				<option value="inactive" {% if server.status == 'inactive' %} selected {% endif %}>Inactive</option>
			</select>

			<label for="uptime">Uptime (hours):</label>
			<input type="number" name="uptime" id="uptime" value="{{ server.uptime }}" required>

			<button type="submit">Save Changes</button>
		</form>

		<a href="/servers" class="back-link">‚Üê Back to Servers</a>
	</div>

	<!-- Recent Stats Table -->
	<table>
		<tr>
			<th>CPU Usage</th>
			<th>RAM Usage</th>
			<th>Disk Usage</th>
			<th>Network Usage</th>
		</tr>
		<tr id="latest-stats">
			<td id="cpu">Loading...</td>
			<td id="ram">Loading...</td>
			<td id="disk">Loading...</td>
			<td id="network">Loading...</td>
		</tr>
	</table>

	<!-- Historical Graph -->
<div style="width: 100%; max-width: 800px;">
	<canvas id="statsChart" style="width: 100%; height: 400px;"></canvas>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const serverId = "{{ server.id }}";
    
    function fetchLatestStats() {
        fetch(`/api/server/${serverId}/stats`)
            .then(response => response.json())
            .then(data => {
                document.getElementById("cpu").textContent = data.cpu_usage;
                document.getElementById("ram").textContent = data.ram_usage;
                document.getElementById("disk").textContent = data.disk_usage;
                document.getElementById("network").textContent = data.network_usage;
            });
    }

		let chartInstance = null;

		function fetchHistoricalStats() {
        fetch(`/api/server/${serverId}/history`)
            .then(response => response.json())
            .then(data => {
                if (data.length === 0) {
                    console.error("No historical data available.");
                    return;
                }

                const labels = data.map(stat => new Date(stat.recorded_at).toLocaleTimeString());
                const cpuData = data.map(stat => stat.cpu_usage);
                const ramData = data.map(stat => stat.ram_usage);
                const diskData = data.map(stat => stat.disk_usage);

                // Destroy previous chart before creating a new one
                if (chartInstance) {
                    chartInstance.destroy();
                }

                const ctx = document.getElementById("statsChart").getContext("2d");
                chartInstance = new Chart(ctx, {
                    type: "line",
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: "CPU Usage (%)",
                                data: cpuData,
                                borderColor: "red",
                                backgroundColor: "rgba(255, 0, 0, 0.2)",
                                fill: true,
                                tension: 0.3, // Smooth curves
                            },
                            {
                                label: "RAM Usage (%)",
                                data: ramData,
                                borderColor: "blue",
                                backgroundColor: "rgba(0, 0, 255, 0.2)",
                                fill: true,
                                tension: 0.3,
                            },
                            {
                                label: "Disk Usage (%)",
                                data: diskData,
                                borderColor: "green",
                                backgroundColor: "rgba(0, 255, 0, 0.2)",
                                fill: true,
                                tension: 0.3,
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    font: { size: 14 },
                                    boxWidth: 20
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(tooltipItem) {
                                        return `${tooltipItem.dataset.label}: ${tooltipItem.raw}%`;
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return value + "%";
                                    }
                                }
                            },
                            x: {
                                display: true,
                                title: { display: true, text: "Time" }
                            }
                        }
                    }
                });
            })
            .catch(error => console.error("Error loading historical stats:", error));
    }


    // Load stats on page load
    fetchLatestStats();
    fetchHistoricalStats();

    // Auto-refresh latest stats every 30 seconds
    setInterval(fetchLatestStats, 30000);
</script>

{% endblock %}
